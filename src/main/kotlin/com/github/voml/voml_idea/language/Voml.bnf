{
    parserClass = "com.github.voml.voml_idea.language.parser.VomlParser"
    parserUtilClass = "com.github.voml.voml_idea.language.psi.VomlParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Voml"
    psiImplClassSuffix = "Impl"
    psiPackage = "com.github.voml.voml_idea.language.psi"
    psiImplPackage = "com.github.voml.voml_idea.language.psi.impl"

    elementTypeHolderClass = "com.github.voml.voml_idea.language.psi.VomlTypes"
    elementTypeClass = "com.github.voml.voml_idea.language.psi.VomlElementType"
    tokenTypeClass = "com.github.voml.voml_idea.language.psi.VomlTokenType"

    psiImplUtilClass = "com.github.voml.voml_idea.language.psi.impl.VomlPsiImplUtil"

    tokens = [
        COMMENT = "regexp://[^\r\n]*"
        BLOCK_COMMENT = "regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]"
        NULL = "null"
        IMPORT = "@import"

        BOOLEAN = "regexp:true|false"

        IDENT = "regexp:[A-Za-z_][A-Za-z0-9_]*"

        BYTE ="regexp:(0[bBoOxX][0-9A-Fa-f][0-9A-Fa-f_]*)"
        INTEGER = "regexp:(0|[1-9][0-9_]*)"
        FLOAT = "regexp:([0-9]+\.[0-9]*([*][*][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)"
        SIGN = "regexp:[+-]"

        STRING = "STRING"
        RAW_STRING = "RAW STRING"

        PARENTHESIS_L = "("
        PARENTHESIS_R = ")"
        BRACKET_L = "["
        BRACKET_R = "]"
        BRACE_L = "{"
        BRACE_R = "}"
        EQ = "="
        NAN = "nan"
        COLON = ":"
        COMMA = ","
        CITE = "$"
        DOT = "."
        STAR = "*"
        SPACE='regexp:\s+'
    ]
}

Voml ::= expression*;

expression ::= scope
	| insert_pair
	| insert_item
	| import_statement;
// ------------------------------------
import_statement ::= IMPORT BRACE_L symbol_path BRACE_R;
symbol_path ::= key_like (DOT key_like)*;


private key_like ::= str | IDENT | INTEGER;
key_path ::= [DOT*] symbol_path;

// ------------------------------------
scope ::= <<paired key_path>>;
insert_pair ::= symbol_path eq value;
insert_item ::= (DOT|STAR) value;
private eq ::= EQ | COLON;
// ------------------------------------
value ::= NULL | BOOLEAN | num | reference | str | table;

type_hint ::= IDENT;
string_prefix ::= IDENT;
number_suffix ::= IDENT;

private num ::= [SIGN] (INTEGER | DECIMAL) [number_suffix] | [SIGN] BYTE | other_num;
private str ::= [string_prefix] (STRING | RAW_STRING);
private other_num ::= NAN;

reference ::= CITE symbol_path;

table ::= [type_hint] <<paired table_inner>>;

private table_inner ::= [insert_pair (COMMA insert_pair)* [COMMA]];

meta paired ::=
    PARENTHESIS_L <<param>> PARENTHESIS_R
  | BRACKET_L <<param>> BRACKET_R
  | BRACE_L <<param>> BRACE_R
